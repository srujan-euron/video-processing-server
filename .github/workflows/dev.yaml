name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'development')
    steps:
    - uses: actions/checkout@v4
    
    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Install sshpass
      run: sudo apt-get install sshpass
    
    - name: Deploy to Ubuntu server
      env:
        BRANCH: ${{ github.ref }}
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        if [ "$BRANCH" = "refs/heads/main" ]; then
          APP_PATH="/var/www/video-processing-server"
          SERVICE_NAME="video-processing-server"
          AWS_SECRET_NAME="${{ secrets.MAIN_AWS_SECRET_NAME }}"
          APP_PORT="${{ secrets.MAIN_APP_PORT }}"
        elif [ "$BRANCH" = "refs/heads/development" ]; then
          APP_PATH="/var/www/video-processing-server-dev/video-processing-server"
          SERVICE_NAME="video-processing-server-dev"
          AWS_SECRET_NAME="${{ secrets.DEV_AWS_SECRET_NAME }}"
          APP_PORT="${{ secrets.DEV_APP_PORT }}"
        else
          echo "Unsupported branch for deployment"
          exit 1
        fi

        echo "Deploying to $APP_PATH"
        echo "Using AWS Secret Name: $AWS_SECRET_NAME"

        # Use sshpass for password-based authentication
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} << EOF
          set -x  # Enable verbose mode
          cd $APP_PATH
          git pull origin ${BRANCH#refs/heads/}
          npm ci

          echo "Attempting to fetch secrets from AWS Secrets Manager..."
          # Check if AWS CLI is installed
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI is not installed. Installing now..."
            sudo apt-get update && sudo apt-get install -y awscli
          fi

          # Check AWS CLI version
          aws --version

          # Attempt to fetch secrets
          if SECRET_VALUE=\$(aws secretsmanager get-secret-value --secret-id $AWS_SECRET_NAME --region ${{ secrets.AWS_REGION }} --query SecretString --output text); then
            echo "Secrets fetched successfully"
            # Write secret to .env file, ensuring proper formatting
            echo "\$SECRET_VALUE" > .env
            echo ".env file created"
            
            # Ensure .env has the correct permissions
            chmod 600 .env
            echo "Permissions set for .env file"

            # Display the first line of .env file (be careful not to expose sensitive data)
            echo "First line of .env file:"
            head -n 1 .env | cut -d'=' -f1
          else
            echo "Failed to fetch secrets from AWS Secrets Manager"
            exit 1
          fi

          # Build the project
          npm run build

          # Restart the systemd service
          sudo systemctl restart $SERVICE_NAME.service

          # Check the status of the service
          sudo systemctl status $SERVICE_NAME.service

          # Verify the service health
          curl http://localhost:$APP_PORT/health || exit 1
          
          set +x  # Disable verbose mode
        EOF
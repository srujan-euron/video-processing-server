generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id
  firstName             String
  lastName              String?
  email                 String                 @unique
  password              String?
  authProvider          AuthProvider           @default(CREDENTIALS)
  profilePic            String?
  gender                UserGender?
  about                 String?
  createdAt             DateTime
  updatedAt             DateTime
  phone                 String?                @unique
  phoneVerified         Boolean                @default(false)
  lastLoginAt           DateTime?
  referredAt            DateTime?
  referredByAffiliateId String?
  affiliate             AffiliateUser?
  BannerClick           BannerClick[]
  BookBookmark          BookBookmark[]
  BookPurchase          BookPurchase[]
  BundleBookmark        BundleBookmark[]
  BundlePurchase        BundlePurchase[]
  Cart                  Cart[]
  Certificate           Certificate[]
  CourseBookmark        CourseBookmark[]
  CoursePurchase        CoursePurchase[]
  CourseReview          CourseReview[]
  CourseReviewVote      CourseReviewVote[]
  LMSQandA              LMSQandA[]
  LMSQandAReply         LMSQandAReply[]
  PaymentOrder          PaymentOrder[]
  RecentlyViewedBook    RecentlyViewedBook[]
  RecentlyViewedBundle  RecentlyViewedBundle[]
  RecentlyViewedCourse  RecentlyViewedCourse[]
  ReelComment           ReelComment[]
  ReelCommentVote       ReelCommentVote[]
  ReelLike              ReelLike[]
  ReelShare             ReelShare[]
  ReelView              ReelView[]
  Report                Report[]
  referredByAffiliate   AffiliateUser?         @relation("ReferredUsers", fields: [referredByAffiliateId], references: [id])
  UserBookAccess        UserBookAccess[]
  UserBundleAccess      UserBundleAccess[]
  UserCourseAccess      UserCourseAccess[]
  UserKeywordScore      UserKeywordScore[]
  UserPlanAccess        UserPlanAccess[]
  UserQuizResponse      UserQuizResponse[]
  UserQuizStatus        UserQuizStatus[]
  UserVideoProgress     UserVideoProgress[]
}

model AdminUser {
  id               String             @id
  firstName        String
  lastName         String?
  email            String             @unique
  role             AdminRole
  profilePic       String?
  gender           UserGender?
  about            String?
  createdAt        DateTime
  updatedAt        DateTime
  phone            String?
  Banner           Banner[]
  ContactForm      ContactForm[]
  PlanInterestForm PlanInterestForm[]
  Reel             Reel[]
}

model Banner {
  id              String            @id
  title           String?
  description     String?
  startDate       DateTime?
  endDate         DateTime?
  targetAudience  String?
  impressionCount Int?
  bannerSize      String?
  type            BannerType?       @default(IMAGE)
  section         BannerSection
  campaignId      String?
  isActive        Boolean?          @default(true)
  priority        Int?
  altText         String?
  imageUrl        String
  targetLink      String
  creatorId       String?
  createdAt       DateTime
  updatedAt       DateTime
  AdminUser       AdminUser?        @relation(fields: [creatorId], references: [id])
  BannerClick     BannerClick[]
  BannerUtmMetric BannerUtmMetric[]
}

model BannerClick {
  id        String   @id
  bannerId  String
  userId    String
  createdAt DateTime
  Banner    Banner   @relation(fields: [bannerId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model BannerUtmMetric {
  id          String   @id
  bannerId    String
  utmSource   String
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
  createdAt   DateTime
  Banner      Banner   @relation(fields: [bannerId], references: [id])
}

model Book {
  id                  String                @id
  title               String                @unique
  author              String?
  description         String
  slug                String                @unique
  pages               Int?
  purchaseMode        PurchaseMode
  publishStatus       PublishStatus         @default(NOT_PUBLISHED)
  url                 String
  webPriceINR         Float?
  mobilePriceINR      Float?
  webPriceUSD         Float?
  mobilePriceUSD      Float?
  webDiscount         Float?
  mobileDiscount      Float?
  webThumbnailUrl     String?
  mobileThumbnailUrl  String?
  previewUrl          String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  offerings           String[]
  language            CourseLanguages       @default(English)
  BookAuthor          BookAuthor[]
  BookBookmark        BookBookmark[]
  BookCategory        BookCategory[]
  BookPurchase        BookPurchase[]
  Cart                Cart[]
  CourseAndBookBundle CourseAndBookBundle[]
  PaymentOrder        PaymentOrder[]
  RecentlyViewedBook  RecentlyViewedBook[]
  UserBookAccess      UserBookAccess[]
}

model Bundle {
  id                   String                 @id
  title                String                 @unique
  subTitle             String?
  description          String?
  slug                 String                 @unique
  purchaseMode         PurchaseMode
  publishStatus        PublishStatus          @default(NOT_PUBLISHED)
  webPriceINR          Float?
  mobilePriceINR       Float?
  webPriceUSD          Float?
  mobilePriceUSD       Float?
  webDiscount          Float?
  mobileDiscount       Float?
  webThumbnailUrl      String?
  mobileThumbnailUrl   String?
  previewUrl           String?
  createdAt            DateTime
  updatedAt            DateTime
  validity             Int
  BundleBookmark       BundleBookmark[]
  BundlePurchase       BundlePurchase[]
  Cart                 Cart[]
  CourseAndBookBundle  CourseAndBookBundle[]
  RecentlyViewedBundle RecentlyViewedBundle[]
  UserBundleAccess     UserBundleAccess[]
}

model Category {
  id             String           @id
  title          String
  archived       Boolean          @default(false)
  archivedAt     DateTime?
  createdAt      DateTime
  updatedAt      DateTime
  BookCategory   BookCategory[]
  CourseCategory CourseCategory[]
  ReelCategory   ReelCategory[]
}

model CompanyAssociated {
  id                     String                   @id
  name                   String
  companyLogo            String?
  createdAt              DateTime
  updatedAt              DateTime
  CourseOfferedByCompany CourseOfferedByCompany[]
}

model Course {
  id                     String                   @id
  title                  String                   @unique
  subTitle               String?
  description            String?
  slug                   String                   @unique
  weight                 Int                      @default(0)
  webPriceINR            Float?
  mobilePriceINR         Float?
  webPriceUSD            Float?
  mobilePriceUSD         Float?
  webDiscount            Float?
  mobileDiscount         Float?
  duration               String
  webThumbnailUrl        String?
  mobileThumbnailUrl     String?
  previewUrl             String?
  learningOutcomes       String[]
  prerequisites          String[]
  createdAt              DateTime
  updatedAt              DateTime
  purchaseMode           PurchaseMode
  status                 PublishStatus            @default(NOT_PUBLISHED)
  language               CourseLanguages          @default(English)
  Cart                   Cart[]
  Certificate            Certificate[]
  CourseAndBookBundle    CourseAndBookBundle[]
  CourseBookmark         CourseBookmark[]
  CourseCategory         CourseCategory[]
  CourseFAQ              CourseFAQ[]
  CourseInstructor       CourseInstructor[]
  CourseLMSTopic         CourseLMSTopic[]
  CourseOfferedByCompany CourseOfferedByCompany[]
  CourseOffering         CourseOffering[]
  CoursePurchase         CoursePurchase[]
  CourseReview           CourseReview[]
  CourseSyllabusTopic    CourseSyllabusTopic[]
  LMSQandA               LMSQandA[]
  PaymentOrder           PaymentOrder[]
  RecentlyViewedCourse   RecentlyViewedCourse[]
  UserCourseAccess       UserCourseAccess[]
  UserQuizStatus         UserQuizStatus[]
  UserVideoProgress      UserVideoProgress[]

  @@index([id, status])
  @@index([status, createdAt, weight])
  @@index([status])
  @@index([status, weight, createdAt])
}

model CourseAndBookBundle {
  id       String           @id
  type     BundleEntityType
  courseId String?
  bookId   String?
  bundleId String
  Book     Book?            @relation(fields: [bookId], references: [id])
  Bundle   Bundle           @relation(fields: [bundleId], references: [id])
  Course   Course?          @relation(fields: [courseId], references: [id])
}

model CourseCategory {
  id         String   @unique
  courseId   String
  categoryId String
  createdAt  DateTime
  updatedAt  DateTime
  Category   Category @relation(fields: [categoryId], references: [id])
  Course     Course   @relation(fields: [courseId], references: [id])

  @@id([courseId, categoryId])
  @@index([categoryId])
  @@index([courseId])
}

model CourseFAQ {
  id        String   @unique
  courseId  String
  faqId     String
  createdAt DateTime
  updatedAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id])
  FAQ       FAQ      @relation(fields: [faqId], references: [id])

  @@id([courseId, faqId])
}

model CourseInstructor {
  id           String     @unique
  courseId     String
  instructorId String
  createdAt    DateTime
  updatedAt    DateTime
  Course       Course     @relation(fields: [courseId], references: [id])
  Instructor   Instructor @relation(fields: [instructorId], references: [id])

  @@id([courseId, instructorId])
  @@index([courseId])
  @@index([instructorId, courseId])
  @@index([instructorId])
}

model CourseLMSLecture {
  id                   String                 @id
  title                String
  duration             String?
  videoUrl             String
  resourcesLinks       String[]               @default([])
  subTopicId           String
  createdAt            DateTime
  updatedAt            DateTime
  CourseLMSSubtopic    CourseLMSSubtopic      @relation(fields: [subTopicId], references: [id])
  LMSQandA             LMSQandA[]
  recentlyViewedCourse RecentlyViewedCourse[]
  UserVideoProgress    UserVideoProgress[]

  @@index([subTopicId, id])
  @@index([subTopicId])
}

model CourseLMSQuiz {
  id                String             @id
  subTopicId        String
  title             String
  createdAt         DateTime
  updatedAt         DateTime
  CourseLMSSubtopic CourseLMSSubtopic  @relation(fields: [subTopicId], references: [id])
  QuizQuestion      QuizQuestion[]
  UserQuizResponse  UserQuizResponse[]
  UserQuizStatus    UserQuizStatus[]

  @@index([subTopicId])
}

model CourseLMSSubtopic {
  id                String                    @id
  topicId           String
  order             Int
  type              CourseLMSSubTopicTypeEnum
  quizId            String?
  lectureId         String?
  createdAt         DateTime
  updatedAt         DateTime
  CourseLMSLecture  CourseLMSLecture[]
  CourseLMSQuiz     CourseLMSQuiz[]
  CourseLMSTopic    CourseLMSTopic            @relation(fields: [topicId], references: [id])
  UserVideoProgress UserVideoProgress[]

  @@index([id, topicId])
  @@index([topicId])
  @@index([topicId, order, id])
  @@index([topicId, order])
  @@index([type])
}

model CourseLMSTopic {
  id                String              @id
  courseId          String
  order             Int
  title             String
  createdAt         DateTime
  updatedAt         DateTime
  CourseLMSSubtopic CourseLMSSubtopic[]
  Course            Course              @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@index([courseId, order, id])
  @@index([courseId, order])
}

model CourseOfferedByCompany {
  id                String            @unique
  courseId          String
  companyId         String
  createdAt         DateTime
  updatedAt         DateTime
  CompanyAssociated CompanyAssociated @relation(fields: [companyId], references: [id])
  Course            Course            @relation(fields: [courseId], references: [id])

  @@id([courseId, companyId])
}

model CourseOffering {
  id         String   @unique
  courseId   String
  offeringId String
  createdAt  DateTime
  updatedAt  DateTime
  Course     Course   @relation(fields: [courseId], references: [id])
  Offering   Offering @relation(fields: [offeringId], references: [id])

  @@id([courseId, offeringId])
  @@index([courseId])
  @@index([courseId, offeringId, createdAt])
  @@index([courseId, offeringId])
  @@index([offeringId])
}

model CoursePurchase {
  id        String   @unique
  userId    String
  courseId  String
  createdAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, courseId])
}

model CourseReview {
  id               String             @id
  userId           String
  courseId         String
  rating           Int
  review           String?
  hidden           Boolean            @default(false)
  createdAt        DateTime
  updatedAt        DateTime
  Course           Course             @relation(fields: [courseId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  CourseReviewVote CourseReviewVote[]
  Report           Report[]
}

model CourseSyllabusSubtopic {
  id                  String              @id
  syllabusTopicId     String
  title               String
  previewUrl          String?
  order               Int
  createdAt           DateTime
  updatedAt           DateTime
  CourseSyllabusTopic CourseSyllabusTopic @relation(fields: [syllabusTopicId], references: [id])
}

model CourseSyllabusTopic {
  id                     String                   @id
  courseId               String
  title                  String
  order                  Int
  createdAt              DateTime
  updatedAt              DateTime
  CourseSyllabusSubtopic CourseSyllabusSubtopic[]
  Course                 Course                   @relation(fields: [courseId], references: [id])
}

model FAQ {
  id        String      @id
  question  String
  answer    String
  answerUrl String?
  createdAt DateTime
  updatedAt DateTime
  CourseFAQ CourseFAQ[]
}

model Instructor {
  id                   String                 @id
  fullName             String
  profileUrl           String?
  expertise            String
  bio                  String?
  createdAt            String
  updatedAt            String
  BookAuthor           BookAuthor[]
  CourseInstructor     CourseInstructor[]
  InstructorExperience InstructorExperience[]
}

model InstructorExperience {
  id           String     @unique
  instructorId String
  company      String
  companyLogo  String?
  years        Int
  details      String?
  createdAt    DateTime
  updatedAt    DateTime
  Instructor   Instructor @relation(fields: [instructorId], references: [id])
}

model Offering {
  id             String           @id
  iconUrl        String?
  text           String
  createdAt      DateTime
  updatedAt      DateTime
  CourseOffering CourseOffering[]
}

model QuizOption {
  id               String             @id
  questionId       String
  option           String
  isCorrect        Boolean
  createdAt        DateTime
  updatedAt        DateTime
  QuizQuestion     QuizQuestion       @relation(fields: [questionId], references: [id])
  UserQuizResponse UserQuizResponse[]
}

model QuizQuestion {
  id               String             @id
  quizId           String
  question         String
  marks            Int
  createdAt        DateTime
  updatedAt        DateTime
  QuizOption       QuizOption[]
  CourseLMSQuiz    CourseLMSQuiz      @relation(fields: [quizId], references: [id])
  UserQuizResponse UserQuizResponse[]
}

model SubscriptionPlan {
  id               String           @id
  name             String           @unique
  description      String?
  type             PlanType
  features         String[]
  extraInfo        String?
  monthlyChargeINR Float
  monthlyChargeUSD Float
  webPriceINR      Float
  mobilePriceINR   Float
  webPriceUSD      Float
  mobilePriceUSD   Float
  webDiscount      Float            @default(0)
  mobileDiscount   Float            @default(0)
  createdAt        DateTime
  updatedAt        DateTime
  status           PlanStatus       @default(INACTIVE)
  strength         Int
  PaymentOrder     PaymentOrder[]
  UserPlanAccess   UserPlanAccess[]
}

model UserBookAccess {
  id        String   @unique
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Book      Book     @relation(fields: [bookId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, bookId])
}

model BookAuthor {
  id           String     @unique
  bookId       String
  instructorId String
  createdAt    DateTime
  updatedAt    DateTime
  Book         Book       @relation(fields: [bookId], references: [id])
  Instructor   Instructor @relation(fields: [instructorId], references: [id])

  @@id([bookId, instructorId])
}

model UserBundleAccess {
  id        String   @unique
  userId    String
  bundleId  String
  validTill DateTime
  createdAt DateTime
  updatedAt DateTime
  Bundle    Bundle   @relation(fields: [bundleId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, bundleId])
}

model UserCourseAccess {
  id        String   @unique
  userId    String
  courseId  String
  createdAt DateTime
  updatedAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, courseId])
  @@index([courseId])
  @@index([courseId, userId])
  @@index([userId, courseId, createdAt])
  @@index([userId])
}

model UserPlanAccess {
  id               String           @unique
  userId           String
  planId           String
  validTill        DateTime
  createdAt        DateTime
  updatedAt        DateTime
  lastPurchasedAt  DateTime
  SubscriptionPlan SubscriptionPlan @relation(fields: [planId], references: [id])
  User             User             @relation(fields: [userId], references: [id])

  @@id([userId, planId])
}

model UserQuizResponse {
  id            String        @id
  userId        String
  quizId        String
  questionId    String
  optionId      String
  isCorrect     Boolean
  marks         Int
  createdAt     DateTime
  updatedAt     DateTime
  QuizOption    QuizOption    @relation(fields: [optionId], references: [id])
  QuizQuestion  QuizQuestion  @relation(fields: [questionId], references: [id])
  CourseLMSQuiz CourseLMSQuiz @relation(fields: [quizId], references: [id])
  User          User          @relation(fields: [userId], references: [id])
}

model CourseBookmark {
  id        String   @unique
  userId    String
  courseId  String
  createdAt DateTime
  updatedAt DateTime
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, courseId])
  @@index([courseId])
  @@index([courseId, userId])
  @@index([userId])
}

model BundleBookmark {
  id        String   @unique
  userId    String
  bundleId  String
  createdAt DateTime
  updatedAt DateTime
  bundle    Bundle   @relation(fields: [bundleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, bundleId])
}

model BookBookmark {
  id        String   @unique
  userId    String
  bookId    String
  createdAt DateTime
  updatedAt DateTime
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, bookId])
}

model RecentlyViewedCourse {
  id        String            @id
  userId    String
  courseId  String
  createdAt DateTime
  updatedAt DateTime
  lectureId String?
  course    Course            @relation(fields: [courseId], references: [id])
  lecture   CourseLMSLecture? @relation(fields: [lectureId], references: [id])
  user      User              @relation(fields: [userId], references: [id])

  @@index([courseId])
  @@index([userId])
}

model RecentlyViewedBook {
  id        String   @id
  userId    String
  bookId    String
  createdAt DateTime
  updatedAt DateTime
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model RecentlyViewedBundle {
  id        String   @id
  userId    String
  bundleId  String
  createdAt DateTime
  updatedAt DateTime
  bundle    Bundle   @relation(fields: [bundleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Keyword {
  id               String             @id
  keyword          String
  createdAt        DateTime
  updatedAt        DateTime
  ReelKeyword      ReelKeyword[]
  UserKeywordScore UserKeywordScore[]
}

model UserKeywordScore {
  id        String  @id
  userId    String
  keywordId String
  score     Float
  Keyword   Keyword @relation(fields: [keywordId], references: [id])
  User      User    @relation(fields: [userId], references: [id])

  @@unique([userId, keywordId])
}

model ContactForm {
  id         String      @id
  name       String
  email      String
  phone      String
  message    String
  status     QueryStatus @default(PENDING)
  resolvedBy String?
  createdAt  DateTime
  updatedAt  DateTime
  resolver   AdminUser?  @relation(fields: [resolvedBy], references: [id])
}

model PlanInterestForm {
  id            String      @id
  name          String
  email         String
  phone         String
  country       String
  companyName   String
  companySize   Int
  learnersCount Int
  jobTitle      String
  jobLevel      String
  message       String?
  resolvedBy    String?
  status        QueryStatus @default(PENDING)
  createdAt     DateTime
  updatedAt     DateTime
  resolver      AdminUser?  @relation(fields: [resolvedBy], references: [id])
}

model ResetUserPassword {
  id        String   @id
  email     String
  token     String
  expiresAt DateTime
  createdAt DateTime
  updatedAt DateTime

  @@index([token])
}

model BookCategory {
  id         String   @id
  bookId     String
  categoryId String
  Book       Book     @relation(fields: [bookId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])

  @@unique([bookId, categoryId])
}

model BookPurchase {
  id        String   @unique
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  Book      Book     @relation(fields: [bookId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, bookId])
}

model BundlePurchase {
  id        String   @unique
  userId    String
  bundleId  String
  createdAt DateTime @default(now())
  Bundle    Bundle   @relation(fields: [bundleId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, bundleId])
}

model Cart {
  id        String           @unique
  userId    String
  createdAt DateTime
  updatedAt DateTime
  bookId    String?
  bundleId  String?
  courseId  String?
  type      BundleEntityType
  Book      Book?            @relation(fields: [bookId], references: [id])
  Bundle    Bundle?          @relation(fields: [bundleId], references: [id])
  Course    Course?          @relation(fields: [courseId], references: [id])
  User      User             @relation(fields: [userId], references: [id])

  @@index([bookId])
  @@index([bookId, userId])
  @@index([courseId])
  @@index([courseId, userId])
  @@index([userId, courseId, type])
  @@index([userId])
}

model CourseReviewVote {
  id           String       @id
  userId       String
  reviewId     String
  voteType     VoteType
  createdAt    DateTime
  updatedAt    DateTime
  CourseReview CourseReview @relation(fields: [reviewId], references: [id])
  User         User         @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
}

model LMSQandA {
  id               String           @id
  courseId         String
  lectureId        String
  userId           String
  question         String
  hidden           Boolean          @default(false)
  createdAt        DateTime
  updatedAt        DateTime
  Course           Course           @relation(fields: [courseId], references: [id])
  CourseLMSLecture CourseLMSLecture @relation(fields: [lectureId], references: [id])
  User             User             @relation(fields: [userId], references: [id])
  LMSQandAReply    LMSQandAReply[]
  Report           Report[]
}

model LMSQandAReply {
  id         String   @id
  questionId String
  userId     String
  reply      String
  createdAt  DateTime
  updatedAt  DateTime
  hidden     Boolean  @default(false)
  LMSQandA   LMSQandA @relation(fields: [questionId], references: [id])
  User       User     @relation(fields: [userId], references: [id])
  Report     Report[]
}

model Reel {
  id               String               @id
  title            String
  description      String?
  videoId          String
  thumbnailUrl     String?
  addedBy          String?
  processingStatus ReelProcessingStatus @default(PROCESSING)
  publishStatus    PublishStatus        @default(NOT_PUBLISHED)
  createdAt        DateTime
  updatedAt        DateTime
  AdminUser        AdminUser?           @relation(fields: [addedBy], references: [id])
  ReelCategory     ReelCategory[]
  ReelComment      ReelComment[]
  ReelKeyword      ReelKeyword[]
  ReelLike         ReelLike[]
  ReelShare        ReelShare[]
  ReelView         ReelView[]
}

model ReelCategory {
  id         String   @id
  reelId     String
  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id])
  Reel       Reel     @relation(fields: [reelId], references: [id])
}

model ReelComment {
  id              String            @id
  userId          String
  reelId          String
  comment         String
  hidden          Boolean           @default(false)
  createdAt       DateTime
  updatedAt       DateTime
  Reel            Reel              @relation(fields: [reelId], references: [id])
  User            User              @relation(fields: [userId], references: [id])
  ReelCommentVote ReelCommentVote[]
  Report          Report[]
}

model ReelCommentVote {
  id          String      @id
  userId      String
  commentId   String
  voteType    VoteType
  createdAt   DateTime
  updatedAt   DateTime
  ReelComment ReelComment @relation(fields: [commentId], references: [id])
  User        User        @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model ReelKeyword {
  id        String  @id
  keywordId String
  reelId    String
  relevance Float
  Keyword   Keyword @relation(fields: [keywordId], references: [id])
  Reel      Reel    @relation(fields: [reelId], references: [id])

  @@unique([reelId, keywordId])
}

model ReelLike {
  id        String   @id
  userId    String
  reelId    String
  liked     Boolean  @default(false)
  createdAt DateTime
  updatedAt DateTime
  Reel      Reel     @relation(fields: [reelId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, reelId])
}

model ReelShare {
  id        String   @id
  userId    String
  reelId    String
  createdAt DateTime
  updatedAt DateTime
  Reel      Reel     @relation(fields: [reelId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model ReelView {
  id        String   @id
  userId    String
  reelId    String
  createdAt DateTime
  updatedAt DateTime
  Reel      Reel     @relation(fields: [reelId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Report {
  id              String         @id
  reportedBy      String
  courseReviewId  String?
  lmsQandAId      String?
  reelCommentId   String?
  reason          String
  description     String
  status          ReportStatus   @default(PENDING)
  type            ReportType
  createdAt       DateTime
  updatedAt       DateTime
  lmsQandAReplyId String?
  CourseReview    CourseReview?  @relation(fields: [courseReviewId], references: [id])
  LMSQandA        LMSQandA?      @relation(fields: [lmsQandAId], references: [id])
  LMSQandAReply   LMSQandAReply? @relation(fields: [lmsQandAReplyId], references: [id])
  ReelComment     ReelComment?   @relation(fields: [reelCommentId], references: [id])
  User            User           @relation(fields: [reportedBy], references: [id])
}

model UserVideoProgress {
  id                String            @id
  userId            String
  courseId          String
  subTopicId        String
  lectureId         String
  watchedDuration   Int               @default(0)
  completed         Boolean           @default(false)
  lastWatchedAt     DateTime          @default(now())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  Course            Course            @relation(fields: [courseId], references: [id])
  CourseLMSLecture  CourseLMSLecture  @relation(fields: [lectureId], references: [id])
  CourseLMSSubtopic CourseLMSSubtopic @relation(fields: [subTopicId], references: [id])
  User              User              @relation(fields: [userId], references: [id])

  @@unique([userId, lectureId])
  @@index([courseId])
  @@index([courseId, userId])
  @@index([userId])
}

model PaymentOrder {
  id             String            @id
  orderId        String
  userId         String
  amount         Float
  type           PurchaseItemTypes
  courseId       String?
  bookId         String?
  subscriptionId String?
  status         PaymentStatus
  gateway        PaymentGateway
  createdAt      DateTime
  updatedAt      DateTime
  currency       PaymentCurrency   @default(INR)
  affiliateId    String?
  commissionRate Float?            @default(20.00)
  AffiliateUser  AffiliateUser?    @relation(fields: [affiliateId], references: [id])
  book           Book?             @relation(fields: [bookId], references: [id])
  course         Course?           @relation(fields: [courseId], references: [id])
  subscription   SubscriptionPlan? @relation(fields: [subscriptionId], references: [id])
  user           User              @relation(fields: [userId], references: [id])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model course_search_view {
  id            String                   @id @db.VarChar
  title         String?
  subTitle      String?
  search_vector Unsupported("tsvector")?

  @@index([search_vector], map: "course_search_idx", type: Gin)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model book_search_view {
  id            String                   @id @db.VarChar
  title         String?
  author        String?
  description   String?
  author_names  String?
  search_vector Unsupported("tsvector")?

  @@index([search_vector], map: "book_search_idx", type: Gin)
}

model PhoneVerificationSession {
  id        String   @id
  phone     String
  code      String
  createdAt DateTime
  updatedAt DateTime
}

model Roadmap {
  id          String        @id
  title       String        @unique
  link        String
  status      RoadmapStatus @default(INACTIVE)
  createdAt   DateTime
  updatedAt   DateTime
  description String?
  thumbnail   String?
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model project_course_search_view {
  id            String                   @id @db.VarChar
  title         String?
  subTitle      String?
  search_vector Unsupported("tsvector")?

  @@index([search_vector], map: "project_course_search_idx", type: Gin)
}

model AffiliateUser {
  id                      String                    @id @default(uuid())
  userId                  String                    @unique
  affiliateCode           String                    @unique
  commissionRate          Float
  totalEarnings           Float                     @default(0)
  availableBalance        Float                     @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  AffiliateClick          AffiliateClick[]
  AffiliatePaymentDetails AffiliatePaymentDetails[]
  transactions            AffiliateTransaction[]
  user                    User                      @relation(fields: [userId], references: [id])
  withdrawals             AffiliateWithdrawal[]
  PaymentOrder            PaymentOrder[]
  referredUsers           User[]                    @relation("ReferredUsers")
}

model AffiliateTransaction {
  id          String            @id @default(uuid())
  affiliateId String
  amount      Float
  type        TransactionType
  status      TransactionStatus
  orderId     String?
  productId   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  affiliate   AffiliateUser     @relation(fields: [affiliateId], references: [id])
}

model AffiliateWithdrawal {
  id          String           @id @default(uuid())
  affiliateId String
  amount      Float
  status      WithdrawalStatus
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  PayoutType  PaymentType
  affiliate   AffiliateUser    @relation(fields: [affiliateId], references: [id])
}

model AffiliateClick {
  id            String        @id
  affiliateId   String
  ipAddress     String?
  userAgent     String?
  referrer      String?
  country       String?
  city          String?
  device        String?
  browser       String?
  os            String?
  createdAt     DateTime      @default(now())
  AffiliateUser AffiliateUser @relation(fields: [affiliateId], references: [id])
}

model AffiliatePaymentDetails {
  id            String         @id
  affiliateId   String
  type          PaymentType
  country       PaymentCountry
  accountNumber String?
  accountName   String?
  bankName      String?
  ifscCode      String?
  pancard       String?
  vpa           String?
  paypalEmail   String?
  payoneerID    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  AffiliateUser AffiliateUser  @relation(fields: [affiliateId], references: [id])
}

model Certificate {
  id        String   @id
  courseId  String
  userId    String
  createdAt DateTime
  updatedAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model UserQuizStatus {
  id            String            @id
  userId        String
  courseId      String
  quizId        String
  status        QuizPassingStatus
  createdAt     DateTime
  updatedAt     DateTime
  Course        Course            @relation(fields: [courseId], references: [id])
  CourseLMSQuiz CourseLMSQuiz     @relation(fields: [quizId], references: [id])
  User          User              @relation(fields: [userId], references: [id])

  @@unique([quizId, userId])
}

enum PaymentGateway {
  CASHFREE
  PAYPAL
  RAZORPAY
}

enum PaymentStatus {
  CREATED
  FAILED
  SUCCESSFUL
}

enum PurchaseItemTypes {
  COURSE
  BOOK
  SUBSCRIPTION
}

enum QueryStatus {
  PENDING
  RESOLVED
}

enum PaymentCurrency {
  INR
  USD
}

enum AuthProvider {
  GOOGLE
  APPLE
  CREDENTIALS
}

enum UserGender {
  male
  female
  others
}

enum AdminRole {
  ADMIN
  SUPERADMIN
}

enum BannerType {
  GIF
  IMAGE
  VIDEO
}

enum BundleEntityType {
  COURSE
  BOOK
}

enum CourseLMSSubTopicTypeEnum {
  QUIZ
  LECTURE
}

enum CourseLanguages {
  English
  Hindi
}

enum PlanStatus {
  ACTIVE
  INACTIVE
}

enum PlanType {
  PERSONAL
  TEAM
  ENTERPRISE
}

enum PublishStatus {
  PUBLISHED
  NOT_PUBLISHED
}

enum PurchaseMode {
  FREE
  PAID
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum ReportType {
  REVIEW
  QANDA
  REELS_COMMENT
  QANDAREPLY
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum BannerSection {
  HOME
  COURSE_PURCHASE
  POPULAR_COURSES
}

enum RoadmapStatus {
  ACTIVE
  INACTIVE
}

enum TransactionType {
  COMMISSION
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PaymentCountry {
  IN
  US
}

enum PaymentType {
  BANK_TRANSFER
  UPI
  PAYPAL
  PAYONEER
}

enum QuizPassingStatus {
  PASSED
  FAILED
}

enum ReelProcessingStatus {
  PROCESSED
  PROCESSING
  FAILED
}
